spring.application.name=pawtner

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# JWT Configuration
app.pawtner.jwt.jwt-secret=${JWT_SECRET}
app.pawtner.jwt.app-name=${JWT_APP_NAME}
app.pawtner.jwt.jwt-expiration=${JWT_EXPIRATION}

# Email Configuration
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_STARTTLS_ENABLE}
spring.mail.transport.protocol=${MAIL_TRANSPORT_PROTOCOL}
spring.mail.debug=${MAIL_DEBUG}

# Cloudinary Configuration
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

# Midtrans Configuration
midtrans.server-key=${MIDTRANS_SERVER_KEY}
midtrans.client-key=${MIDTRANS_CLIENT_KEY}
midtrans.is-production=${MIDTRANS_IS_PRODUCTION}

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}

#Untuk menguji login menggunakan Google, silakan salin tautan di bawah ini lalu tempelkan pada browser Anda.
#http://localhost:8080/oauth2/authorization/google

# Frontend URL Configuration
app.pawtner.reset-password-url=${RESET_PASSWORD_URL}

# Delivery Fee Configuration
app.pawtner.delivery-fee=${DELIVERY_FEE}